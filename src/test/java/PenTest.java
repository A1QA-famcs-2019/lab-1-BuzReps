import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {
	@DataProvider(name = "validConstructorParams")
	Object[][] getValidConstructorParams()
	{
		return new Object[][]{
			{0, 0.1, "RED"},
			{1, 1.0, "green"},
			{69, Double.MAX_VALUE, "blue"},
			{404, Double.MIN_VALUE, "aquamarine"},
			{1337, 777.0, "BLACK"},
			{Integer.MAX_VALUE, 345.13434, "WHITE"}
		};
	}

	@Test(dataProvider = "validConstructorParams")
	void constructorsPositiveTest(Integer containerValue, Double size, String color)
	{
		try
		{
			new Pen(containerValue);
			new Pen(containerValue, size);
			new Pen(containerValue, size, color);
		}
		catch (Exception e) {
			Assert.fail("Constructor should not throw exceptions with valid arguments.");
		}
	}

	@Test
	void invalidContainerConstructorTest()
	{
		Assert.expectThrows(Exception.class, () -> new Pen(-1));
		Assert.expectThrows(Exception.class, () -> new Pen(-1, 23));
		Assert.expectThrows(Exception.class, () -> new Pen(-1, 23, "RED"));
	}

	@Test
	void invalidLetterSizeConstructorTest()
	{
		Assert.expectThrows(Exception.class, () -> new Pen(1, -23));
	}

	@Test
	void invalidColorConstructorTest()
	{
		Assert.expectThrows(Exception.class, () -> new Pen(1, 23, ""));
		Assert.expectThrows(NullPointerException.class, () -> new Pen(1, 23, null));
	}

	@Test
		void getColorTest()
	{
		final String[] colors = {"RED", "WHITE", "green"};
		for(String color : colors)
			Assert.assertEquals(new Pen(1, 2, color).getColor(), color, "Constructor argument and object field does not match.");
	}

	@Test
	void isWorkTest()
	{
		Pen pen = new Pen(100, 99.5);
		Assert.assertTrue(pen.isWork(), "");
		pen.write("H");

		Assert.assertFalse(pen.isWork(), "If pen does not have enough ink to write a single character it should be treated as not working.");
	}

	@DataProvider(name = "writeMethodArgs")
	Object[][] getWriteMethodArgs()
	{
		return new Object[][]{
			{0, 10, "Hello world", ""},
			{100, 1, "TestTestTest", "TestTestTest"},
			{80, 10, "123456789", "12345678"},
			{100, 1, "hi", "hi"},
			{50, 60, "h", ""},
			{1, 0.2, "helloo", "hello"},
		};
	}

	@Test(dataProvider = "writeMethodArgs")
	void writePositiveTest(int container, double size, String word, String expected)
	{
		final Pen pen = new Pen(container, size, "RED");
		Assert.assertEquals(pen.write(word), expected);
	}

	@Test
	void writeFractionalCostsTest()
	{
		final Pen pen = new Pen(1, 0.1);
		Assert.assertEquals(pen.write("Heee"), "Heee");
		// 4 characters written 6 characters left
		Assert.assertEquals(pen.write("123456789"), "123456", "Ink capacity should handle fractional costs correctly.");
	}

	@Test
	void writeNegativeTest()
	{
		// should it return empty string or throw an exception???
		Assert.expectThrows(NullPointerException.class, () -> new Pen(100, 10, null));
	}

	@Test
	void doSomethingElseTest()
	{
		// Redirect stdout
		PrintStream stdOut = System.out;
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outputStream));

		// test
		final String color = "RED";
		new Pen(100, 0.3, color).doSomethingElse();
		Assert.assertEquals(color + System.lineSeparator(), outputStream.toString(), "Written value should be equal to color and be followed by system dependent line separator.");

		// restore stdout
		System.setOut(stdOut);
	}
}
